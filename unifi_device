#!/usr/bin/php
<?php
# Unifi Plugin:: Number of clients connected
#
# Required config:
#
#  [unifi_*]
#  env.unifi_user Controller_Username
#  env.unifi_pass Controller_Password
#  env.unifi_host https://unifi.fqdn.com:8443
#  env.unifi_site Site_Name (often "default" for home use)
#  env.unifi_ver 5.8.28 (Controller software version)
#  env.unifi_ssl false (true == Fail on bad SSL certificate)
###
#  env.unifi_clients_graphorder order of graphs, optional
#
# Required pre-requisite:
#
#  https://github.com/Art-of-WiFi/UniFi-API-client 
#
# I put in in my PHP search path, under unifi (on ubuntu, that'd be /usr/share/php/unifi/Client.php)
#
# I'm not positive how that package is versioned - I downloaded 9-17-2018 (SHA:2c03587)


require_once('unifi/Client.php');

function make_safe($name) {
	return strtolower(preg_replace("/[^a-zA-Z0-9]+/", "_", $name));
}



$unifi_connection = new UniFi_API\Client(
    $_ENV['unifi_user'],
    $_ENV['unifi_pass'],
    $_ENV['unifi_host'],
    $_ENV['unifi_site'],
    $_ENV['unifi_ver'],
    $_ENV['unifi_ssl']
);

$login            = $unifi_connection->login();
$results          = $unifi_connection->list_devices(); // returns a PHP array containing alarm objects

if(isset($argv[1])) {
	if($argv[1] == "config") {
		echo "multigraph unifi_device_xfer\n";
	    echo "graph_title Transfer per device (5 min avg)\n";
    	echo "graph_vlabel Bytes/\${graph_period} rcvd (-) / trans (+)\n";
		echo "graph_category unifi\n";
		echo "graph_args --base 1024\n";
		echo "graph_info Bytes transfered per UniFi device\n";
		$buffer = array();
		foreach ( $results as $device ) {
			$devName = make_safe($device->name);
			$buffer[] = "";
			echo "{$devName}_rxbyte.label " . $device->name . "\n";
			echo "{$devName}_rxbyte.type DERIVE\n";
			echo "{$devName}_rxbyte.min 0\n";
			echo "{$devName}_rxbyte.draw LINE1\n";
			echo "{$devName}_rxbyte.graph no\n";
			echo "{$devName}_txbyte.label " . $device->name . "\n";
			echo "{$devName}_txbyte.type DERIVE\n";
			echo "{$devName}_txbyte.min 0\n";
			echo "{$devName}_txbyte.draw LINE1\n";
			echo "{$devName}_txbyte.negative {$devName}_rxbyte\n";

			$buffer[] = "multigraph unifi_device_xfer.{$devName}";
			$buffer[] = "graph_title Transfer for {$device->name} (5 min avg)";
    		$buffer[] = "graph_vlabel Bytes/\${graph_period} rcvd (-) / trans (+)";
			$buffer[] = "graph_category unifi";
			$buffer[] = "graph_args --base 1024";
			$buffer[] = "graph_info Bytes transfered for UniFi device: {$device->name}";
			$buffer[] = "rxbytes.label invisible";
			$buffer[] = "rxbytes.type DERIVE";
			$buffer[] = "rxbytes.min 0";
			$buffer[] = "rxbytes.draw LINE1";
			$buffer[] = "rxbytes.graph no";
			$buffer[] = "txbytes.label Bytes";
			$buffer[] = "txbytes.type DERIVE";
			$buffer[] = "txbytes.min 0";
			$buffer[] = "txbytes.draw LINE1";
			$buffer[] = "txbytes.negative rxbytes";

		}
		echo join("\n", $buffer) . "\n";
	}
} else {
	echo "multigraph unifi_device_xfer\n";
	foreach ( $results as $device ) {
		$buffer[] = "";
		$devName = make_safe($device->name);
		echo "{$devName}_rxbyte.value " . ( $device->{'rx_bytes'} ) . "\n";
		echo "{$devName}_txbyte.value " . ( $device->{'tx_bytes'} ) . "\n";
		$buffer[] = "multigraph unifi_device_xfer.{$devName}";
		$buffer[] = "rxbytes.value " . $device->{'rx_bytes'};
		$buffer[] = "txbytes.value " . $device->{'tx_bytes'};	
	}
	echo join("\n", $buffer) . "\n";
}

?>
